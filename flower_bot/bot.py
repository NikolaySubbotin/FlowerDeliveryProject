import sqlite3
import logging
from queries import GET_ORDERS_SQL, UPDATE_STATUS_SQL, DB_PATH
from queries import update_order_status_in_db
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
from config import DB_PATH, TELEGRAM_TOKEN
from aiogram import Bot
from queries import get_user_telegram_id


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
class Database:
    def __init__(self):
        self.conn = sqlite3.connect(DB_PATH)
        self.cur = self.conn.cursor()

    def get_orders(self):
        self.cur.execute(GET_ORDERS_SQL)
        orders = self.cur.fetchall()

        order_dict = {}
        for order in orders:
            order_id = order[0]
            if order_id not in order_dict:
                order_dict[order_id] = {
                    "id": order[0],
                    "phone": order[1],
                    "address": order[2],
                    "status": order[3],
                    "products": []
                }
            order_dict[order_id]["products"].append(order[4])

        return list(order_dict.values())

    def update_status(self, order_id, status):
        self.cur.execute(UPDATE_STATUS_SQL, (status, order_id))
        self.conn.commit()


db = Database()

async def update_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    order_id = int(query.data.split('_')[1])
    new_status = "completed" if "complete" in query.data else "canceled"

    db.update_status(order_id, new_status)
    await query.answer("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await order_detail(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üå∏ –ë–æ—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/orders - —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )


async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    orders = db.get_orders()

    if not orders:
        await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    keyboard = []
    for order in orders:
        btn = InlineKeyboardButton(
            f"–ó–∞–∫–∞–∑ #{order['id']} ({order['status']})",
            callback_data=f"order_{order['id']}"
        )
        keyboard.append([btn])

    await update.message.reply_text(
        "üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def order_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    order_id = int(query.data.split('_')[1])

    orders = db.get_orders()
    order = next((o for o in orders if o["id"] == order_id), None)

    if order:
        text = (
            f"üõçÔ∏è –ó–∞–∫–∞–∑ #{order['id']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {order['address']}\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"üå∏ –¢–æ–≤–∞—Ä—ã: {', '.join(order['products'])}"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"complete_{order_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–µ–Ω", callback_data=f"cancel_{order_id}")]
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )



async def update_order_status(order_id, new_status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    update_order_status_in_db(order_id, new_status)

    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –∫–ª–∏–µ–Ω—Ç–∞
    user_telegram_id = get_user_telegram_id(order_id)

    if user_telegram_id:
        status_messages = {
            "pending": "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!",
            "processing": "–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è.",
            "completed": "–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üå∏",
            "canceled": "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
        }

        message_text = status_messages.get(new_status, "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await bot.send_message(chat_id=user_telegram_id, text=message_text)


if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("orders", show_orders))
    app.add_handler(CallbackQueryHandler(order_detail, pattern=r"^order_"))
    app.add_handler(CallbackQueryHandler(update_status, pattern=r"^(complete|cancel)_"))

    app.run_polling()